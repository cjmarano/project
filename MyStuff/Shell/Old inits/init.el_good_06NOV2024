(setq gc-cons-threshold (* 50 1000 1000))

(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
	         '("elpa"  . "https://elpa.gnu.org/packages/")t)
(add-to-list 'package-archives
             '("nongnu" . "https://elpa.nongnu.org/nongnu/")t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/")t)

(package-initialize)

(defun packages-require (&rest packs)
  "Install and load a package. If the package is not available installs it automaticaly."
  (mapc  (lambda (package)
           (unless (package-installed-p package)
                   (package-install package)
                   )
	   )

         packs

         ))

;; Make the initial buffer load faster by setting its mode to fundamental-mode
(customize-set-variable 'initial-major-mode 'fundamental-mode)

;; added 20JUL2023 ---------------------------------------------------
(add-to-list 'default-frame-alist '(height . 60))
(add-to-list 'default-frame-alist '(width . 110))

;; basic setup -------------------------------------------------------

(require 'use-package)

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
(setq user-emacs-directory "~/.cache/emacs/")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
;; Below expands to: ~/.cache/emacs/var/auto-save
(require 'no-littering)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)
(global-font-lock-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(transient-mark-mode t)
(global-display-line-numbers-mode t)
(column-number-mode t)
(tool-bar-mode -1)
(global-hl-line-mode +1)
(setq global-auto-revert-mode 1) ;; revert buffers when the underlying file has changed.
(setq auto-revert-use-notify t) 
(setq use-short-answers t)
(setq ediff-split-window-function 'split-window-horizontally)
(keymap-global-set "M-p" 'previous-buffer)
(keymap-global-set "M-n" 'next-buffer)

;; Disable line numbers for some modes 22DEC2022
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; M-x recentf-open-files
(recentf-mode 1)
(setq recentf-max-menu-items 10)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; -------------------------------------------------------------------
;; Fix ediff problem with test files.
(setq ediff-diff-options "--text")
;; -------------------------------------------------------------------

(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 10)
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-center-contents nil)
    (setq dashboard-banner-logo-title "Big")
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (setq dashboard-startup-banner "~/Pictures/Trefoil.png")
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer nil)
    )
  :config
  (dashboard-setup-startup-hook))


(require 'doom-modeline)
(doom-modeline-mode 1)
(use-package nerd-icons
  :ensure t)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-env-version t)
(setq doom-modeline-env-enable-rust t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-minor-modes t)
(setq doom-modeline-lsp t)
(setq doom-modeline-lsp-icon t)

(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; YASnippet
(add-to-list 'load-path
            "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay .9))

(use-package projectile)
  :ensure t
  :config
;;  (keymap-set projectile-mode-map "C-x p" 'projectile-command-map)
 (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(projectile-mode +1)

;; Added for Rust.
(setq lsp-auto-guess-root t)

(use-package vterm
    :ensure t)

(use-package vertico
  :init
  (vertico-mode))


;; Consult -----------------------------------------------------------
(require 'consult)
;; are two line below redundant since vertico called above?
;; (require 'vertico)
;; (vertico-mode)
(setq completion-styles '(substring basic))

(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)    
         ("C-x b" . consult-buffer)               
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame) 
         ("C-x t b" . consult-buffer-other-tab)   
         ("C-x r b" . consult-bookmark)           
         ("C-x p b" . consult-project-buffer)))     
;; End Consult -------------------------------------------------------


;; Marginalia package ------------------------------------------------
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init
  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
;; End marginalia section --------------------------------------------


;; added 25AUG2023 to solve image type issue -------------------------
;; (add-to-list 'image-types 'svg)
;; -------------------------------------------------------------------

;; Dired -------------------------------------------------------------
;; test to suppress ls does not support dired.
;; Is below line needed?
(setq ls-lisp-use-insert-directory-program nil)
(require 'ls-lisp)

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-loa --group-directories-first")))

;; package below no longer available
;; (use-package dired-single)

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

;; -------------------------------------------------------------------
;; Denote ----------------------------------------------------
;; -------------------------------------------------------------------

(setq denote-directory (expand-file-name "~/notes/"))

(setq denotes-known-keywords '("emacs" "init" "general" "testing"))

(setq denote-file-type nil)

(add-hook 'dired-mode-hook #'denote-dired-mode)

(keymap-global-set "s-b" 'denote)
;; -------------------------------------------------------------------
;; Systems Crafters Org mode -----------------------------------------
;; -------------------------------------------------------------------

(use-package org
  :pin gnu
  :commands (org-capture org-agenda)
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (with-eval-after-load 'org-faces
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1))))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block unspecified :inherit 'fixed-pitch)
      (set-face-attribute 'org-code unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword unspecified :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line unspecified :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox unspecified :inherit 'fixed-pitch)))
  
  ;; end Org fonts

  (add-to-list 'org-emphasis-alist
             '("*" (:foreground "red")
               ))

  (add-to-list 'org-emphasis-alist
             '("+" (:foreground "LightGreen")
               ))

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (setq org-agenda-files
        '("~/org/journal/journal.org"
          "~/org/notes/notes.org"
          "~/org/tasks/tasks.org"
          "~/org/daily/daily.org"))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!)")
          (sequence "COMPLETED(c)")))

  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

  (setq org-tag-alist                   
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@note" . ?t)
          ("@code" . ?c)
          ("@init" . ?i)))


  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/org/tasks/tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/org/journal/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/org/notes.org")
          
           )
          ("jm" "Meeting" entry
           (file+olp+datetree "~/org/journal/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           )))

  (keymap-set global-map "C-c j" 
              (lambda () (interactive) (org-capture nil "jj"))))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; End System Crafter's Org // Org Roam begins.........................

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org/roam")
  (org-roam-completion-everywhere t)

  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

;; Adding System Crafters code here to test
;; (org-roam-dailies-capture-templates
;; '(("d" "default" entry "* %<%I:%M %p   %?"
;; :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
;; End S-C test code.

;; entries below seem to be additional, not required
(keymap-set global-map "C-c l" 'org-store-link)
(keymap-set global-map "C-c a" 'org-agenda)
(keymap-set global-map "C-c c" 'org-capture)
(setq org-log-done 'time)

;; -------------------------------------------------------------------
;; end Org Roam section. ---------------------------------------------
;; -------------------------------------------------------------------

;; -------------------------------------------------------------------
;; Org Babel
;; -------------------------------------------------------------------
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (ruby . t)
   (eshell . t)
   (lisp . t)
   (rust . t)))

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("l" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("L" . "src lisp"))
;; (add-to-list 'org-structure-template-alist '("p" . "src python"))
(add-to-list 'org-structure-template-alist '("r" . "src ruby"))
;; (add-to-list 'org-structure-template-alist '("s" . "src shell"))

(let ((org-confirm-babel-evaluate nil)))
;; -------------------------------------------------------------------
;; begin python mode -----------------------------------------
;; -------------------------------------------------------------------

(use-package eglot
  :ensure t
  :defer t
  :hook (python-mode . eglot-ensure)
  :hook (rust-mode . eglot-ensure))

;; added to suppress "Python can't guess indent"
(setq python-indent-guess-indent-offset t)  
(setq python-indent-guess-indent-offset-verbose nil)


(setq python-python-command "Users/charles.marano/.pyenv/shims/python3")
(setq python-shell-completion-native-enable nil)

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

;; Tree-sitter -------------------------------------------------------

;; This is from System Crafters
(require 'treesit)
(require 'tree-sitter)

(use-package treesit
  :commands (treesit-install-language-grammar nf/treesit-install-all-languages)
  :init
  (add-to-list
   'treesit-language-source-alist
   '(
     '(python "https://github.com/tree-sitter/tree-sitter-python")
     '(ruby "https://github.com/tree-sitter/tree-sitter-ruby.git")
     '(rust "https://github.com/tree-sitter/tree-sitter-rust")
     ))
  :config
  (defun nf/treesit-install-all-languages ()
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
     (dolist (lang languages)
	    (treesit-install-language-grammar lang)
	    (message "`%s' parser was installed." lang)
	    (sit-for 0.75)))))


(add-to-list 'major-mode-remap-alist'
             '(python-mode . python-ts-mode)
             '(rust-mode . rust-ts-mode)
             '(ruby-mode . ruby-ts-mode)
             )

;; end tree-sit mode -------------------------------------------------


;; end python mode ---------------------------------------------------

;; this is temporay to enable company-mode globally.
(add-hook 'after-init-hook 'global-company-mode)

(use-package company
  (add-hook 'after-init-hook 'global-company-mode)
   :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  (:map python-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package lsp-ui)

(use-package company-box
:hook (company-mode . company-box-mode))

;; begin lisp mode ---------------------------------------------------

(setq inferior-lisp-program "/usr/local/bin/sbcl")

;; Enable Paredit.
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
(add-hook 'ielm-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-mode-hook 'enable-paredit-mode)
(add-hook 'slime-repl-mode-hook 'enable-paredit-mode)
(require 'paredit)

;; Enable Rainbow Delimiters.
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
(add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)
(add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)


;; Setup load-path, autoloads and your lisp system
(add-to-list 'load-path "~/.emacs.d/elpa")
;; (require 'slime-autoloads)
(require 'sly)
(eval-after-load 'sly
  `(keymap-set sly-prefix-map "M-h" 'sly-documentation-lookup))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (paredit-mode t)
            (rainbow-delimiters-mode t)
            (show-paren-mode 1)
            ))

;; Eldoc for ielm
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)


;; end lisp mode -----------------------------------------------------


;; rust mode ---------------------------------------------------------

;; Rust stuff goes here.
(use-package (rustic)
(setq rustic-lsp-client 'eglot)
(require 'rust-mode)
(add-hook 'rust-mode-hook
          (lambda () (setq indent-tabs-mode nil)))
(add-hook 'rust-mode-hook
          (lambda () (prettify-symbols-mode))))

(setq rustic-lsp-client 'eglot)

(add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))

;; end rust mode -----------------------------------------------------

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 180 :family "Hack"))))
 '(org-headline-done ((t (:foreground "gray80"))))
 '(org-level-1 ((t (:inherit outline-1 :background "gray22" :box (:line-width (1 . 1) :style released-button) :weight bold :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :background "gray23" :box (:line-width (1 . 1) :style released-button) :height 1.2)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-box-enable-icon t)
 '(company-box-icons-alist 'company-box-icons-images)
 '(custom-enabled-themes '(sanityinc-tomorrow-eighties))
 '(custom-safe-themes
   '("2721b06afaf1769ef63f942bf3e977f208f517b187f2526f0e57c1bd4a000350" "04aa1c3ccaee1cc2b93b246c6fbcd597f7e6832a97aaeac7e5891e6863236f9f" "603a831e0f2e466480cdc633ba37a0b1ae3c3e9a4e90183833bc4def3421a961" "aec7b55f2a13307a55517fdf08438863d694550565dee23181d2ebd973ebd6b8" "8c7e832be864674c220f9a9361c851917a93f921fedb7717b1b5ece47690c098" "0c860c4fe9df8cff6484c54d2ae263f19d935e4ff57019999edbda9c7eda50b8" "4eb9462a8fff9153bfe88a9ef53aa043aec8b79c5298d2873e887e0c3a8b03de" "37b6695bae243145fa2dfb41440c204cd22833c25cd1993b0f258905b9e65577" "571661a9d205cb32dfed5566019ad54f5bb3415d2d88f7ea1d00c7c794e70a36" "2b501400e19b1dd09d8b3708cefcb5227fda580754051a24e8abf3aff0601f87" "ffafb0e9f63935183713b204c11d22225008559fa62133a69848835f4f4a758c" "77fff78cc13a2ff41ad0a8ba2f09e8efd3c7e16be20725606c095f9a19c24d3d" "81f53ee9ddd3f8559f94c127c9327d578e264c574cda7c6d9daddaec226f87bb" "703a3469ae4d2a83fd5648cac0058d57ca215d0fea7541fb852205e4fae94983" "f079ef5189f9738cf5a2b4507bcaf83138ad22d9c9e32a537d61c9aae25502ef" "64045b3416d83e5eac0718e236b445b2b3af02ff5bcd228e9178088352344a92" "da75eceab6bea9298e04ce5b4b07349f8c02da305734f7c0c8c6af7b5eaa9738" "78e6be576f4a526d212d5f9a8798e5706990216e9be10174e3f3b015b8662e27" "90a6f96a4665a6a56e36dec873a15cbedf761c51ec08dd993d6604e32dd45940" "c4cecd97a6b30d129971302fd8298c2ff56189db0a94570e7238bc95f9389cfb" "70cfdd2e7beaf492d84dfd5f1955ca358afb0a279df6bd03240c2ce74a578e9e" default))
 '(dashboard-startupify-list
   '(dashboard-insert-banner dashboard-insert-newline dashboard-insert-banner-title dashboard-insert-newline dashboard-insert-init-info dashboard-insert-items dashboard-insert-newline))
 '(denote-known-keywords '("emacs" "init" "general" "testing"))
 '(elpy-rpc-python-command "python3")
 '(flycheck-python-flake8-executable "python3")
 '(flycheck-python-pycompile-executable "python3")
 '(flycheck-python-pylint-executable "python3")
 '(org-agenda-files '("~/OneDrive - Regeneron Pharmaceuticals, Inc/3.org"))
 '(org-faces-easy-properties
   '((todo . :background)
     (tag . :foreground)
     (priority . :foreground)))
 '(org-id-locations-file
   "/Users/charles.marano/.cache/emacs/var/org/id-locations.el")
 '(org-structure-template-alist
   '(("h" . "export html")
     ("r" . "src ruby")
     ("L" . "src lisp")
     ("l" . "src emacs-lisp")
     ("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("q" . "quote")
     ("s" . "src")
     ("z" . "src shell ")
     ("p" . "python")
     ("R" . "rust")))
 '(org-tempo-keywords-alist nil)
 '(package-selected-packages
   '(tree-sitter-langs denote cargo-mode cargo project lsp-mode flycheck-rust rustic 0blayout gnu-elpa-keyring-update consult color-theme-sanityinc-tomorrow marginalia tree-sitter nerd-icons-dired doom-themes lsp-ui sly org flycheck-pyflakes eglot eldoc company-box vterm vertico no-littering projectile dashboard org-bullets paredit dired-single which-key doom-modeline yasnippet-snippets material-theme rust-mode ob-rust use-package org-roam htmlize elpy magit flycheck rainbow-delimiters dash diffview cl-lib))
 '(warning-suppress-log-types '((use-package)))
 '(yas-snippet-dirs
   '("/Users/charles.marano/.emacs.d/elpa/yasnippet-snippets-20241014.949" "" "/Users/charles.marano/.emacs.d/elpa/elpy-20240109.1445/snippets/")))

'(python-shell-interpeter "users/charles.marano/.pyenv/shims/python3")

;; duplicate of above? add-hook is different than selected packages.
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; ====================================
;; Development Setup
;; ====================================
(elpy-enable)

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
;; added to supress flymake error message when compliing python (12AUG2022)
(remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))

;; User-Defined init.el ends here


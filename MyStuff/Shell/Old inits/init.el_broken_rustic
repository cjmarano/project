(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
	         '("elpa"  . "https://elpa.gnu.org/packages/")t)
(add-to-list 'package-archives
             '("nongnu" . "https://elpa.nongnu.org/nongnu/")t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/")t)

(package-initialize)

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))) 

(defun packages-require (&rest packs)
  "Install and load a package. If the package is not available installs it automaticaly."
  (mapc  (lambda (package)
           (unless (package-installed-p package)
             (package-install package)
             )
	       )

         packs

         ))

;; added 20JUL2023 ---------------------------------------------------
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 100))

;; basic setup -------------------------------------------------------

;; init.el --- user init file
(setq load-prefer-newer t)
(add-to-list 'load-path "~/.emacs.d/elpa/auto-compile-20250301.1627")
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)

(require 'use-package)

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
(setq user-emacs-directory "~/.cache/emacs/")

(use-package no-littering)

;; Below expands to: ~/.cache/emacs/var/auto-save
(require 'no-littering)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)
(global-font-lock-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(transient-mark-mode t)
(global-display-line-numbers-mode t)
(column-number-mode t)
(tool-bar-mode -1)
(global-hl-line-mode +1)
(setq global-auto-revert-mode 1)
(setq auto-revert-use-notify t) 
(setq use-short-answers t)
(setq ediff-split-window-function 'split-window-horizontally)
(keymap-global-set "M-p" 'previous-buffer)
(keymap-global-set "M-n" 'next-buffer)
;; from emacs-solo -----------------------------------------
(keymap-global-set "M-o" 'other-window)
(keymap-global-set "M-g" 'recentf)

;; Disable line numbers for some modes 22DEC2022
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; M-x recentf-open-files
(recentf-mode 1)
(setq recentf-max-menu-items 10)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; -------------------------------------------------------------------
;; Fix ediff problem with test files.
(setq ediff-diff-options "--text")
;; -------------------------------------------------------------------

(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 10)
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-center-contents nil)
    (setq dashboard-banner-logo-title "New")
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (setq dashboard-startup-banner "~/Pictures/Trefoil.png")
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer nil)
    )
  :config
  (dashboard-setup-startup-hook))

(require 'doom-modeline)
(doom-modeline-mode 1)
(use-package nerd-icons
  :ensure t)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-env-version t)
(setq doom-modeline-env-enable-rust t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-minor-modes t)
(setq doom-modeline-lsp t)
(setq doom-modeline-lsp-icon t)

(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (keymap-global-set "C-x g" 'magit-status) 

;; yasnippet
(add-to-list 'load-path
             "~/.emacs.d/snippets")
(require 'yasnippet)
(yas-global-mode 1)

;; which key built in as of 30.1 but still needed this.
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay .9))

(use-package vterm
    :ensure t)

(use-package vertico
  :init
  (vertico-mode))

;; Consult -----------------------------------------------------------
(require 'consult)
(setq completion-styles '(substring basic))

(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)    
         ("C-x b" . consult-buffer)               
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame) 
         ("C-x t b" . consult-buffer-other-tab)   
         ("C-x r b" . consult-bookmark)           
         ("C-x p b" . consult-project-buffer)))     
;; End Consult -------------------------------------------------------

;; Marginalia package ------------------------------------------------
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init
  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
;; End marginalia section --------------------------------------------

;; added 25AUG2023 to solve image type issue -------------------------
;; (add-to-list 'image-types 'svg)
;; -------------------------------------------------------------------

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

;; -------------------------------------------------------------------
;; Denote ---------------------------------------------------------
;; -------------------------------------------------------------------

(setq denote-directory (expand-file-name "~/notes/"))

(setq denotes-known-keywords '("emacs" "init" "general" "testing"))

(setq denote-file-type nil)

(add-hook 'dired-mode-hook #'denote-dired-mode)

(keymap-global-set "s-b" 'denote)
;; -------------------------------------------------------------------
;; Systems Crafters Org mode -----------------------------
;; -------------------------------------------------------------------

(use-package org
;;  :pin gnu
  :commands (org-capture org-agenda)
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (with-eval-after-load 'org-faces
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1))))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block unspecified :inherit 'fixed-pitch)
      (set-face-attribute 'org-code unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim unspecified :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword unspecified :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line unspecified :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox unspecified :inherit 'fixed-pitch)))
  
 ;; end Org fonts              

  (add-to-list 'org-emphasis-alist
               '("*" (:foreground "red")
                 ))

  (add-to-list 'org-emphasis-alist
               '("+" (:foreground "LightGreen")
                 ))

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (setq org-agenda-files
        '("~/org/journal/journal.org"
          "~/org/notes/notes.org"
          "~/org/tasks/tasks.org"
          "~/org/daily/daily.org"))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!)")
          (sequence "COMPLETED(c)")))

  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

  (setq org-tag-alist                   
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@note" . ?t)
          ("@code" . ?c)
          ("@init" . ?i)))


  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/org/tasks/tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/org/journal/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/org/notes.org")
          
           )
          ("jm" "Meeting" entry
           (file+olp+datetree "~/org/journal/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           )))

  (keymap-set global-map "C-c j" 
              (lambda () (interactive) (org-capture nil "jj"))))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; End System Crafter's Org // Org Roam begins.........................

    (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/roam")
    (org-roam-completion-everywhere t)

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

;; entries below seem to be additional, not required
(keymap-set global-map "C-c l" 'org-store-link)
(keymap-set global-map "C-c a" 'org-agenda)
(keymap-set global-map "C-c c" 'org-capture)
(setq org-log-done 'time)

; end Org Roam section. -----------------------------------
;; -------------------------------------------------------------------

;; -------------------------------------------------------------------
;; Org Babel
;; -------------------------------------------------------------------
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (ruby . t)
   (eshell . t)
   (lisp . t)
   (rust . t)))

(require 'org-tempo)

(let ((org-confirm-babel-evaluate nil)))
;
;; -------------------------------------------------------------------
;; begin python mode ----------------------------------------
;; -------------------------------------------------------------------

(use-package eglot
  :ensure nil
  ;; :defer t
  :hook (python-mode . eglot-ensure)
  :hook (rust-mode . eglot-ensure))

(with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((ruby-mode ruby-ts-mode) "ruby-lsp"))
    (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((python-mode python--ts-mode) "pylsp"))))

;; added to suppress "Python can't guess indent"
(setq python-indent-guess-indent-offset t)  
(setq python-indent-guess-indent-offset-verbose nil)

(setq python-python-command "Users/charles.marano/.pyenv/shims/python3")
(setq python-shell-completion-native-enable nil)

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

;; ---------------------------------------------------------
;; lsp mode additions testing for rust
;; ---------------------------------------------------------
;; (setq lsp-auto-guess-root nil)

(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-inlay-hint-enable t)
  ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))

;; --------------------------------------------------------------------
;; end lsp-mode additions for rust
;; -------------------------------------------------------------------

;; Tree-sitter -------------------------------------------------------

(require 'tree-sitter)
(require 'tree-sitter-langs)
;; (global-tree-sitter-mode)
;; or just for rust-mode
(add-hook 'rust-mode-hook #'tree-sitter-mode)
;; Load the language definition for Rust, if it hasn't been loaded.
;; Return the language object.
(tree-sitter-require 'rust)

;; end tree-sit mode -------------------------------------------------

(tree-sitter-require 'python)

;; end python mode ---------------------------------------------------

;; this is temporay to enable company-mode globally.
(add-hook 'after-init-hook 'global-company-mode)

(use-package company
;;  :after lsp-mode
;;  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  (:map python-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

;; (use-package lsp-ui)

(use-package company-box
  :hook (company-mode . company-box-mode))

;; begin lisp mode ---------------------------------------------------

(setq inferior-lisp-program "/usr/local/bin/sbcl")

;; Enable Paredit.
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
(add-hook 'ielm-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-mode-hook 'enable-paredit-mode)
(add-hook 'slime-repl-mode-hook 'enable-paredit-mode)
(require 'paredit)

;; Enable Rainbow Delimiters.
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
(add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)
(add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)

;; Setup load-path, autoloads and your lisp system
(add-to-list 'load-path "~/.emacs.d/elpa")

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (paredit-mode t)
            (rainbow-delimiters-mode t)
            (show-paren-mode 1)
            ))

;; Eldoc for ielm
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)

;; end lisp mode -----------------------------------------------------

;; rust mode ---------------------------------------------------------

(setq rustic-analyzer-command '("/opt/homebrew/bin/rust-analyzer"))

(use-package (rustic)
    :ensure
    :custom
    (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer")))
    (setq rustic-lsp-client 'eglot)
   ;; :bind (:map rustic-mode-map
   ;;              ("M-j" . lsp-ui-imenu)
   ;;              ("M-?" . lsp-find-references)
   ;;              ("C-c C-c l" . flycheck-list-errors)
   ;;              ("C-c C-c a" . lsp-execute-code-action)
   ;;              ("C-c C-c r" . lsp-rename)
   ;;              ("C-c C-c q" . lsp-workspace-restart)
   ;;              ("C-c C-c Q" . lsp-workspace-shutdown)
   ;;              ("C-c C-c s" . lsp-rust-analyzer-status))

(setq rustic-lsp-client 'eglot)

  (require 'rust-mode)
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
  (add-hook 'rust-mode-hook
            (lambda () (prettify-symbols-mode)))

(add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))

;; end rust mode -----------------------------------------------------

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 180 :family "Hack"))))
 '(org-headline-done ((t (:foreground "grey80"))))
 '(org-level-1 ((t (:inherit outline-1 :background "gray22" :box (:line-width (1 . 1) :style released-button) :weight bold :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :background "gray23" :box (:line-width (1 . 1) :style released-button) :height 1.2)))))

 ; ====================================
;; Development Setup
;; ====================================
(elpy-enable)

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
;; added to supress flymake error message when compliing python (12AUG2022)
(remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)

;; User-Defined init.el ends here

